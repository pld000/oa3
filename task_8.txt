-------------------- Шаг 4. --------------------
GameProcessor
- Назначение: Управляет основным игровым процессом.
- Запросы:
  - getCurrentState(): GameState – возвращает текущее состояние игры.
  - isGameOver(): boolean – проверяет, завершена ли игра.
- Команды:
  - initializeGame(): void – инициализирует игру.
  - processPlayerAction(action: PlayerAction): void – обрабатывает действие игрока.
  - endGame(): void – завершает игру.
- Ограничения:
  - Все действия игрока должны быть валидны в текущем состоянии игры.

GameState
- Назначение: Управляет состояниями игры (например, запуск, активная игра, завершение).
- Запросы:
  - getCurrentState(): GameState – возвращает текущее состояние.
- Команды:
  - transitionToState(state: GameState): void – выполняет переход в указанное состояние.
- Ограничения:
  - Переход между состояниями возможен только по определённым правилам.

MatchHandlerFactory
- Назначение: Создаёт обработчики для обработки комбинаций.
- Запросы:
  - getHandler(type: CombinationType): MatchHandler – возвращает обработчик для заданного типа комбинации.

ScoreCalculator
- Назначение: Подсчитывает очки за ходы игрока.
- Запросы:
  - calculateScore(combination: Combination): int – возвращает количество очков за комбинацию.

BonusHandler
- Назначение: Обрабатывает бонусные действия.
- Запросы:
  - canActivateBonus(bonusType: BonusType): boolean – проверяет, может ли быть активирован бонус.
- Команды:
  - activateBonus(bonusType: BonusType): void – активирует бонус.

InputProcessor
- Назначение: Обрабатывает ввод пользователя.
- Запросы:
  - isValidAction(action: PlayerAction): boolean – проверяет корректность действия игрока.
- Команды:
  - processInput(action: PlayerAction): void – обрабатывает ввод и передаёт его в GameEngine.

Logger
- Назначение: Ведёт запись событий.
- Команды:
  - logEvent(event: LogEvent): void – записывает событие в журнал.


-------------------- Шаг 5. --------------------
AbstractMatchHandler (класс поведения)
- Назначение: Фиксирует общую логику для обработчиков комбинаций.
- Запросы:
  - getCombinationType(): CombinationType – возвращает тип комбинации.
- Команды:
  - processCombination(combination: Combination): void – обрабатывает комбинацию (детали реализации остаются в наследниках).

Конкретные наследники:
- LineMatchHandler – обработка комбинации "линия".
- CrossMatchHandler – обработка комбинации "крест".

AbstractBonusHandler (класс поведения)
- Назначение: Фиксирует общую логику для обработки бонусов.
- Запросы:
  - getBonusType(): BonusType – возвращает тип бонуса.
- Команды:
  - applyBonus(target: GameField): void – применяет бонус (детали реализации остаются в наследниках).

Конкретные наследники:
- RowBonusHandler – обработка бонуса удаления строки.
- ColumnBonusHandler – обработка бонуса удаления столбца.

AbstractState (класс поведения)
- Назначение: Фиксирует поведение для состояний игры.
- Запросы:
  - isTransitionAllowed(toState: GameState): boolean – проверяет возможность перехода в другое состояние.
- Команды:
  - onEnter(): void – действия при входе в состояние.
  - onExit(): void – действия при выходе из состояния.

Конкретные наследники:
- StartState – поведение для состояния "Запуск".
- PlayState – поведение для состояния "Игра".
- EndState – поведение для состояния "Завершение".
